'use client';

import { useEffect, useRef } from 'react';

interface VideoPreloaderProps {
  currentVideo: string;
  videoType: string;
}

const VideoPreloader = ({ currentVideo, videoType }: VideoPreloaderProps) => {
  const preloadedVideos = useRef<Set<string>>(new Set());

  // Fonction pour obtenir l'URL optimis√©e avec transformations Cloudinary
  const getOptimizedVideoUrl = (videoId: string) => {
    // URL simple sans transformations pour tester
    // Si cela fonctionne, on pourra r√©ajouter les transformations
    return `https://res.cloudinary.com/dpqjlqwcq/video/upload/${videoId}`;
  };

  // Fonction pour pr√©charger une vid√©o
  const preloadVideo = (videoId: string) => {
    if (preloadedVideos.current.has(videoId)) {
      return; // D√©j√† pr√©charg√©e
    }

    const video = document.createElement('video');
    video.preload = 'metadata'; // Pr√©charge les m√©tadonn√©es et le d√©but de la vid√©o
    video.src = getOptimizedVideoUrl(videoId);
    video.style.display = 'none';
    video.style.position = 'absolute';
    video.style.left = '-9999px';
    
    // Ajouter des gestionnaires d'√©v√©nements pour le d√©bogage
    video.addEventListener('loadstart', () => {
      console.log(`D√©but du pr√©chargement: ${videoId}`);
    });
    
    video.addEventListener('loadedmetadata', () => {
      console.log(`M√©tadonn√©es charg√©es: ${videoId}`);
      preloadedVideos.current.add(videoId);
    });
    
    video.addEventListener('error', (e) => {
      console.error(`Erreur de pr√©chargement pour ${videoId}:`, e);
    });

    document.body.appendChild(video);
  };

  // Fonction pour pr√©charger un ensemble de vid√©os
  const preloadVideoSet = (videoIds: string[]) => {
    videoIds.forEach(videoId => {
      preloadVideo(videoId);
    });
  };

  // Logique de pr√©chargement intelligent bas√©e sur l'√©tat actuel
  const preloadBasedOnCurrentState = () => {
    // Vid√©os critiques - toujours pr√©charg√©es
    const criticalVideos = ['introduction', 'POV_1', 'POV_2', 'POV_3'];
    
    // Vid√©os de transition
    const transitionVideos = ['1_vers_2', '1_vers_3', '2_vers_1', '2_vers_3', '3_vers_1', '3_vers_2'];
    
    // Vid√©os d'objets
    const objectVideos = [
      'objet_velo', 'objet_boxe', 'objet_foot', 'objet_mapmonde', 
      'objet_sablier', 'objet_plante', 'objet_cd', 'objet_chien', 
      'objet_jeuxvideo', 'objet_photo'
    ];

    // Vid√©os de fin de jeu
    const endGameVideos = ['OUTRO_dmozy4', 'generique'];

    // Pr√©charger les vid√©os critiques imm√©diatement
    preloadVideoSet(criticalVideos);

    // Pr√©charger les vid√©os de transition apr√®s 1 seconde
    setTimeout(() => {
      preloadVideoSet(transitionVideos);
    }, 1000);

    // Pr√©charger les vid√©os d'objets apr√®s 3 secondes
    setTimeout(() => {
      preloadVideoSet(objectVideos);
    }, 3000);

    // Pr√©charger les vid√©os de fin de jeu apr√®s 5 secondes
    setTimeout(() => {
      preloadVideoSet(endGameVideos);
    }, 5000);

    // Pr√©chargement contextuel bas√© sur la vid√©o actuelle
    if (currentVideo === 'introduction') {
      // Si on est dans l'introduction, pr√©charger les POV en priorit√©
      setTimeout(() => {
        preloadVideoSet(['POV_1', 'POV_2', 'POV_3']);
      }, 500);
    } else if (currentVideo.startsWith('POV_')) {
      // Si on est dans un POV, pr√©charger les transitions possibles
      const povNumber = currentVideo.split('_')[1];
      const possibleTransitions = [
        `${povNumber}_vers_1`, 
        `${povNumber}_vers_2`, 
        `${povNumber}_vers_3`
      ].filter(transition => transition !== `${povNumber}_vers_${povNumber}`);
      
      setTimeout(() => {
        preloadVideoSet(possibleTransitions);
      }, 500);
      
      // Pr√©charger les musiques des objets de ce POV en priorit√©
      setTimeout(() => {
        const objectsWithMusic = ['boxe', 'foot', 'chien', 'jeuxvideo'];
        objectsWithMusic.forEach(objectType => {
          const audio = document.createElement('audio');
          audio.preload = 'auto';
          audio.src = getOptimizedVideoUrl(`${objectType}_song`);
          audio.style.display = 'none';
          audio.style.position = 'absolute';
          audio.style.left = '-9999px';
          
          audio.addEventListener('canplaythrough', () => {
            console.log(`üéµ Musique ${objectType} pr√©charg√©e en priorit√© pour POV_${povNumber}`);
          });

          document.body.appendChild(audio);
        });
      }, 200);
    }
  };

  // Effet principal pour le pr√©chargement
  useEffect(() => {
    // Pr√©chargement initial
    preloadBasedOnCurrentState();
  }, []);

  // Pr√©chargement contextuel quand la vid√©o change
  useEffect(() => {
    preloadBasedOnCurrentState();
  }, [currentVideo, videoType]);

  // Pr√©chargement de la musique principale
  useEffect(() => {
    const audio = document.createElement('audio');
    audio.preload = 'auto'; // Pr√©charger compl√®tement pour un d√©marrage instantan√©
    audio.src = getOptimizedVideoUrl('main_song');
    audio.style.display = 'none';
    audio.style.position = 'absolute';
    audio.style.left = '-9999px';
    
    audio.addEventListener('loadstart', () => {
      console.log('üéµ D√©but pr√©chargement musique principale');
    });
    
    audio.addEventListener('loadedmetadata', () => {
      console.log('üéµ M√©tadonn√©es musique principale charg√©es');
    });
    
    audio.addEventListener('canplaythrough', () => {
      console.log('üéµ Musique principale enti√®rement pr√©charg√©e et pr√™te');
    });
    
    audio.addEventListener('error', (e) => {
      console.error('‚ùå Erreur pr√©chargement musique principale:', e);
    });

    document.body.appendChild(audio);
  }, []);

  // Pr√©chargement des musiques d'objets
  useEffect(() => {
    const objectsWithMusic = ['boxe', 'foot', 'chien', 'jeuxvideo'];
    
    // Pr√©charger les musiques d'objets plus t√¥t pour un d√©marrage plus rapide
    setTimeout(() => {
      objectsWithMusic.forEach(objectType => {
        const audio = document.createElement('audio');
        audio.preload = 'auto'; // Pr√©charger compl√®tement au lieu de juste les m√©tadonn√©es
        audio.src = getOptimizedVideoUrl(`${objectType}_song`);
        audio.style.display = 'none';
        audio.style.position = 'absolute';
        audio.style.left = '-9999px';
        
        audio.addEventListener('loadstart', () => {
          console.log(`üéµ D√©but pr√©chargement musique ${objectType}`);
        });
        
        audio.addEventListener('loadedmetadata', () => {
          console.log(`üéµ M√©tadonn√©es musique ${objectType} charg√©es`);
        });
        
        audio.addEventListener('canplaythrough', () => {
          console.log(`üéµ Musique ${objectType} enti√®rement pr√©charg√©e et pr√™te`);
        });
        
        audio.addEventListener('error', (e) => {
          console.error(`‚ùå Erreur pr√©chargement musique ${objectType}:`, e);
        });

        document.body.appendChild(audio);
      });
    }, 1000); // R√©duit de 2000ms √† 1000ms pour un pr√©chargement plus rapide
  }, []);

  return null; // Ce composant ne rend rien visuellement
};

export default VideoPreloader;
